#!/bin/bash

# Parse command line arguments
PREVIEW_MODE=false
while [[ "$#" -gt 0 ]]; do
  case $1 in
    --preview) PREVIEW_MODE=true; shift ;;
    *) echo "Unknown parameter: $1"; exit 1 ;;
  esac
done

# Change to project root directory (where .ddev is located)
cd "$( dirname "${BASH_SOURCE[0]}" )/../../.."

# Create necessary directories
echo "Creating necessary directories..."
mkdir -p public_html/wp-content/{uploads,plugins/pressx-core}
chmod -R 777 public_html/wp-content/uploads

# Reset database
echo "Resetting database..."
ddev exec 'mysql -udb -pdb -e "DROP DATABASE IF EXISTS db; CREATE DATABASE db;"'

# Generate a secure random password
ADMIN_PASSWORD=$(openssl rand -base64 12 | tr -dc 'a-zA-Z0-9' | head -c 12)

# Download WordPress core if not present
if [ ! -f public_html/wp-config.php ]; then
    echo "Downloading WordPress..."
    ddev exec -d /var/www/html/public_html wp core download

    echo "Creating wp-config.php..."
    ddev exec -d /var/www/html/public_html wp config create \
        --dbname=db \
        --dbuser=db \
        --dbpass=db \
        --dbhost=db \
        --extra-php <<'PHP'
define( 'PRESSX_FRONTEND_URL', 'http://localhost:3333' );
define( 'WORDPRESS_PREVIEW_SECRET', 'pressx_preview_secret' );
define( 'WP_ENVIRONMENT_TYPE', 'local' );
define( 'GRAPHQL_DEBUG', true );
define( 'GRAPHQL_JWT_AUTH_SECRET_KEY', '$(openssl rand -base64 32)' );

// Include for ddev-managed settings in wp-config-ddev.php
$ddev_settings = dirname(__FILE__) . '/wp-config-ddev.php';
if (is_readable($ddev_settings) && !defined("DB_USER")) {
    require_once($ddev_settings);
}
PHP
fi

# Install dependencies with Composer
echo "Installing dependencies with Composer..."
ddev composer install

# Always install WordPress fresh
echo "Installing WordPress..."
ddev exec -d /var/www/html/public_html wp core install \
    --url='${DDEV_PRIMARY_URL}' \
    --title='PressX' \
    --admin_user=admin \
    --admin_password="${ADMIN_PASSWORD}" \
    --admin_email=admin@example.com

echo "WordPress installed successfully!"
echo -e "\n⚠️  SAVE THESE CREDENTIALS ⚠️"
echo "----------------------------------------"
echo "WordPress Admin: ${DDEV_PRIMARY_URL}/wp-admin"
echo "Username: admin"
echo "Password: ${ADMIN_PASSWORD}"
echo "----------------------------------------"

# Configure WordPress settings
echo "Configuring WordPress settings..."

# Activate required plugins
echo "Activating plugins..."
ddev exec -d /var/www/html/public_html wp plugin activate pressx-core classic-editor wp-graphql wp-graphql-jwt-authentication

# Configure Classic Editor settings
ddev exec -d /var/www/html/public_html wp option update classic-editor-replace replace
ddev exec -d /var/www/html/public_html wp option update classic-editor-allow-sites disallow

# Set up permalink structure
echo "Setting up permalink structure..."
ddev exec -d /var/www/html/public_html wp rewrite structure '/%postname%/'
ddev exec -d /var/www/html/public_html wp rewrite flush

# Create all pages and content using the new WP CLI commands
echo "Creating pages and content..."

# Create pages (Privacy Policy and Terms of Use)
echo "Creating pages..."
ddev wp pressx create_pages --force

# Create home page
echo "Creating home page..."
ddev wp pressx create_home --force

# Create features page
echo "Creating features page..."
ddev wp pressx create_features --force

# Create pricing page
echo "Creating pricing page..."
ddev wp pressx create_pricing --force

# Create resources page
echo "Creating resources page..."
ddev wp pressx create_resources --force

# Create landing page
echo "Creating landing page..."
ddev wp pressx create_landing --force

# Create get-started page
echo "Creating get-started page..."
ddev wp pressx create_get_started --force

# Create articles
echo "Creating articles..."
ddev wp pressx create_articles --force

# Create contact page
echo "Creating contact page..."
ddev wp pressx create_contact --force

# Create menus
echo "Creating primary menu..."
ddev wp pressx create_menu --force

# Create footer menu
echo "Creating footer menu..."
ddev wp pressx create_footer_menu --force

# Configure Next.js environment for preview mode if requested
if [ "$PREVIEW_MODE" = true ]; then
    echo "Setting up preview mode..."

    # Create or update .env.local file with preview settings
    cat > nextjs/.env.local <<EOF
NEXT_PUBLIC_WORDPRESS_API_URL=http://pressx.ddev.site/graphql
NEXT_PUBLIC_PREVIEW_MODE=true
WORDPRESS_PREVIEW_SECRET=pressx_preview_secret
WORDPRESS_PREVIEW_USERNAME=admin
WORDPRESS_PREVIEW_PASSWORD=${ADMIN_PASSWORD}
NODE_TLS_REJECT_UNAUTHORIZED=0
EOF

    echo "Preview mode enabled in Next.js environment"

    # Install Next.js dependencies if not already installed
    if [ ! -d "nextjs/node_modules" ]; then
        echo "Installing Next.js dependencies..."
        cd nextjs && npm install && cd ..
    fi

    echo -e "\n----------------------------------------"
    echo "🔍 Preview Mode Enabled 🔍"
    echo "----------------------------------------"
    echo "Preview mode has been configured."
    echo "To start the Next.js frontend with preview mode:"
    echo "  ddev nextjs"
    echo "----------------------------------------"
fi

# Verify setup
echo -e "\n----------------------------------------"
echo "🎉 Installation Complete! 🎉"
echo "----------------------------------------"
echo "WordPress Admin: ${DDEV_PRIMARY_URL}/wp-admin"
echo "Username: admin"
echo "Password: ${ADMIN_PASSWORD}"
echo "----------------------------------------"
echo "GraphQL endpoint: ${DDEV_PRIMARY_URL}/graphql"
echo "Next.js frontend: http://localhost:3333"
if [ "$PREVIEW_MODE" = true ]; then
    echo "Preview mode: Enabled"
else
    echo "Preview mode: Disabled (use --preview flag to enable)"
fi
echo "----------------------------------------"
echo "Plugin Status:"
ddev exec -d /var/www/html/public_html wp plugin list

